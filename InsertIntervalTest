using Microsoft.VisualStudio.TestTools.UnitTesting;
using ConsoleApplication1;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1.Tests
{
    [TestClass()]
    public class Solution2Tests
    {
        [TestMethod()]
        public void BinarySearchTest()
        {
            IList<Interval> intervals = new List<Interval>(4);
            intervals.Add(new Interval(1, 3));
            intervals.Add(new Interval(6, 9));
            intervals.Add(new Interval(10, 12));

            Solution2 s2 = new Solution2();
            int result = -1;
            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 0);
            Assert.AreEqual(0, result);

            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 1);
            Assert.AreEqual(0, result);

            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 2);
            Assert.AreEqual(0, result);

            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 3);
            Assert.AreEqual(0, result);

            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 4);
            Assert.AreEqual(1, result);

            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 6);
            Assert.AreEqual(1, result);
            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 7);
            Assert.AreEqual(1, result);
            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 9);
            Assert.AreEqual(1, result);

            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 10);
            Assert.AreEqual(2, result);

            result = s2.BinarySearch(intervals, 0, intervals.Count - 1, 13);
            Assert.AreEqual(3, result);
        }

        [TestMethod()]
        public void InsertTest_EmptyList()
        {
            IList<Interval> intervals = new List<Interval>(2);
            IList<Interval> intervalsExpected = new List<Interval>(2);
            intervalsExpected.Add(new Interval(5, 7));

            Solution2 obj = new Solution2();
            var newInterval = new Interval(5, 7);
            intervals = obj.Insert(intervals, newInterval);
            Assert.IsTrue(intervals.SequenceEqual(intervalsExpected));
        }

        [TestMethod()]
        public void InsertTest_AsFirst()
        {
            IList<Interval> intervals = new List<Interval>(2);
            intervals.Add(new Interval(9, 10));

            IList<Interval> intervalsExpected = new List<Interval>(2);
            intervalsExpected.Add(new Interval(5, 7));
            intervalsExpected.Add(new Interval(9, 10));

            Solution2 obj = new Solution2();
            var newInterval = new Interval(5, 7);
            intervals = obj.Insert(intervals, newInterval);
            Assert.IsTrue(intervals.SequenceEqual(intervalsExpected,new IntervalComparer()));
        }

        [TestMethod()]
        public void InsertTest_AsLast()
        {
            IList<Interval> intervals = new List<Interval>(2);
            intervals.Add(new Interval(5, 7));

            IList<Interval> intervalsExpected = new List<Interval>(2);
            intervalsExpected.Add(new Interval(5, 7));
            intervalsExpected.Add(new Interval(9, 10));

            Solution2 obj = new Solution2();
            var newInterval = new Interval(9, 10);
            intervals = obj.Insert(intervals, newInterval);
            Assert.IsTrue(intervals.SequenceEqual(intervalsExpected, new IntervalComparer()));
        }

        [TestMethod()]
        public void InsertTest_NeedMerge()
        {
            IList<Interval> intervals = new List<Interval>(2);
            intervals.Add(new Interval(1, 3));
            intervals.Add(new Interval(6, 9));

            IList<Interval> intervalsExpected = new List<Interval>(2);
            intervalsExpected.Add(new Interval(1, 5));
            intervalsExpected.Add(new Interval(6, 9));

            Solution2 obj = new Solution2();
            var newInterval = new Interval(2, 5);
            intervals = obj.Insert(intervals, newInterval);
            Assert.IsTrue(intervals.SequenceEqual(intervalsExpected, new IntervalComparer()));
        }

        [TestMethod()]
        public void InsertTest_NeedMerge2()
        {
            IList<Interval> intervals = new List<Interval>(2);
            intervals.Add(new Interval(1, 2));
            intervals.Add(new Interval(3, 5));
            intervals.Add(new Interval(6, 7));
            intervals.Add(new Interval(8, 10));
            intervals.Add(new Interval(12, 16));

            IList<Interval> intervalsExpected = new List<Interval>(2);
            intervalsExpected.Add(new Interval(1, 2));
            intervalsExpected.Add(new Interval(3, 10));
            intervalsExpected.Add(new Interval(12, 16));

            Solution2 obj = new Solution2();
            var newInterval = new Interval(4, 9);
            intervals = obj.Insert(intervals, newInterval);
            Assert.IsTrue(intervals.SequenceEqual(intervalsExpected, new IntervalComparer()));
        }
    }

    public class IntervalComparer : IEqualityComparer<Interval>
    {
        public bool Equals(Interval x, Interval y)
        {
            return (x.start == y.start) && (x.end == y.end);
        }

        public int GetHashCode(Interval obj)
        {
            return obj.GetHashCode();
        }
    }
}
